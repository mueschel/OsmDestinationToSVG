<!DOCTYPE html>
<html lang="en">
<head>
 <title>OSM Destination Signs</title>
 <script src="../example/scripts.js" type="text/javascript"></script>
 <script src="../code/svgclean.js" type="text/javascript"></script>
 <meta  charset="UTF-8"/>
 <meta name="viewport" content="width=device-width; initial-scale=1.0;" /> 

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha512-Zcn6bjR/8RZbLEpLIeOwNtzREBAJnUKESxces60Mpoj+2okopSAcSUIUOseddDm0cxnGQzxIR7vJgsLZbdLE3w=="
  crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha512-BwHfrr4c9kmRkLw6iXFdzcdWV/PGkVgiIyIWLLlTSXzWQzxuSg4DiQUCpauz/EWjgk5TYQqX/kvn9pG1NpYfqg=="
  crossorigin=""></script>
 <link rel="stylesheet" type="text/css" href="../example/website.css">



<!-- <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script> -->
<!-- <script src="https://unpkg.com/osmtogeojson@2.2.12/osmtogeojson.js"></script> -->

<script src="../example/OverPassLayer.js"></script>
<script src="../example/Permalink.js"></script>
<script src="../example/MinZoomIndicator.js"></script>

 <base target="_blank">
</head>
<body class="mappage">
<div id="tagSection">
<div id="header">
<h1>Destination Signs</h1>
<p><strong>This tool shows the content of destination tags on roads.</strong>
Select one of the marked ways on the map to show the corresponding destination signs.

<br>The code of this page is available on <a href="https://github.com/mueschel/OsmDestinationToSVG">Github</a>.

</div>

<p></p><div id="map"></div>
<div id="container">&nbsp;</div>
<div class="config">
<h3>Configuration</h3>
<form onsubmit="getsign(document.getElementsByName('wayid')[0].value); return false;">
<!--   Style&nbsp;<select name="style"><option value="lanes">Lanes Based<option value="direction">Direction Based</select><br> -->
  <div>
  <label for="direction">Direction:</label>
  <select name="direction" id="direction"><option value="0">Both<option value="1">Forward<option value="-1">Backward</select>
  </div>
  <div>
  <label for="country">Country:</label>
  <select name="country" id="country"><option value="DE">Germany<option value="AT">Austria<option value="FR">France<option value="GR">Greece<option value="IT">Italy<option value="PL">Poland<option value="PT">Portugal<option value="SR">Serbia</select>
  </div>
  <div>
  <label for="wayid">WayId:</label><input type="text" name="wayid" id="wayid">
  </div>
  <div>  
  <input type="submit" />
  </div>
    <div><a id="permanode" href="">Link to this way</a></div>
</form>
<br>
  <label for="hideOther">Hide other tags:</label><input type="checkbox" name="hideOther" id="hideOther" onClick="toggleOtherTagsVisibility()"></>
</div>
<div id="tagsHeader"></div>
<div id="tagsOther"></div>
<div id="tagsDestination"></div>
</div>
</body>

<script type="text/javascript">
function toggleOtherTagsVisibility() {
  var x = document.getElementById("tagsOther");
  var isHide = document.getElementById("hideOther").checked;
  if (isHide) {
    x.style.display = "none";
  } else {
    x.style.display = "block";
  }
} 

function showdata(d) {
  var data;
  var myContainer = document.getElementById('container');
  try {
    data = JSON.parse(d);
    
    myContainer.innerHTML = "";
    if (data) {
      myContainer.innerHTML = data;
      }
//     if(data.html) {  
//       myContainer.innerHTML += data.html;
//       }
    } 
  catch (e) {
    myContainer.innerHTML = d;
    }
  toggleOtherTagsVisibility()
  if (!isDestinationSignInViewPort()) {
	myContainer.scrollIntoView(false);
  }
  if(cleanup) {cleanup();}
  }

var nowHighlighted;

function loaddata() {
  console.log(this);
  if(nowHighlighted)
    nowHighlighted.setStyle({  color: '#38f'  });
  this.setStyle({   color: '#0d0'  });
  nowHighlighted = this;
  loaddata_i(this.options.data);
}  
  
function loaddata_i(mydata) {
  var url = '../code/generate.pl';
  const relevantKeys = ["destination", "turn", "ref", "highway", "lanes", "colour", "direction", "country", "oneway"];
//   console.log(mydata);
  mydata.direction = document.getElementsByName("direction")[0].value;
  mydata.country = document.getElementsByName("country")[0].value;
//   mydata.style = document.getElementsByName("style")[0].value;
  mydatastr = JSON.stringify(mydata);
  getData(url,'',showdata,mydatastr);
  document.getElementsByName('wayid')[0].value = mydata.id;
  document.getElementById('container').innerHTML = "<h3>Loading...</h3>";
  
  document.getElementById("tagsHeader").innerHTML = "<h3>Tags <a target=\"_blank\" href=\"https://osm.org/way/"+mydata.id+"\">Way "+mydata.id+"</a></h3>";
  
  
  var destinationTags = {};
  var otherTags = {};

  // Tags sortieren
  for (var key in mydata.tags) {
   var startsWithAny = relevantKeys.some(searchString => key.startsWith(searchString));
    if (startsWithAny) {
        destinationTags[key] = mydata.tags[key];
    } else {
        otherTags[key] = mydata.tags[key];
    }
  }
  // Tags anzeigen
  function displayTags(tags, containerId) {
    document.getElementById(containerId).innerHTML = "";
    for (var key in tags) {
        var str = tags[key];
        if (str.indexOf('|') != -1) {
            str = '<br/>&nbsp;' + str.replace(/\|/g, '&nbsp;|<br/>&nbsp;');
        }		
        if (str.indexOf(';') != -1) {
            str = str.replace(/;/gi, ';<wbr />');
        }	
        if (key.indexOf(':') != -1) {
            key = key.replace(/:/gi, '<wbr />:');
        }
		
        document.getElementById(containerId).innerHTML += "<p><b>" + key + "</b> = " + str + "</p>";
    }
  }
  function displayLinkToSandbox(tags, country) {
    var tagstringurl = 'sandbox.htm#country='+country+'&tags=';
    for (var key in tags) {
        var str = tags[key];
		tagstringurl += key + '=' + tags[key] + "%0A";
    } 
	tagstringurl = tagstringurl.replace(/\r\n|\r|\n/g,"%0A");
		
    var container = document.getElementById('tagsDestination');
    container.innerHTML += '<p>â†³<a href="' + tagstringurl + '" target="_blank">Open in Sandbox</a></p>';
  }
  
  // Ziel-Tags und andere Tags anzeigen
  displayTags(destinationTags, "tagsDestination");
  displayTags(otherTags, "tagsOther");
    
  var way = document.getElementsByName("wayid")[0].value;
  var direction = document.getElementsByName('direction')[0].value;
  var country = document.getElementsByName('country')[0].value;
  document.getElementById("permanode").href = '#wayid='+way+'&direction='+direction+'&country='+country;   
  displayLinkToSandbox(destinationTags, country);
  
  return 0;
}

function WaysWithDestination() {

    var options = {
      endpoint: endpoint,
      minzoom: 10,
      query: 'way[highway][~"^destination"~".*"](BBOX);out;>;out skel;',
      callback: function(data) {
        var typeDict = { }; 
        typeDict['node'] = {};
        typeDict['way'] = {};
        for(i=0;i<data.elements.length;i++) {
          var e = data.elements[i];
          if( e['type']!=="way" && e['type']!=="node" ) {  continue; }
          typeDict[ e['type'] ][ e['id'] ] = e ;
          }
        for(var wayId in typeDict['way'] ) {
          var way = typeDict['way'][wayId];
          // build a list of latLng objects
          var latLngs = [];
          for( var n in way['nodes'] ) {
            var nodeId = way['nodes'][n];
            var node = typeDict['node'][nodeId];
            latLngs[latLngs.length] = L.latLng( node['lat'], node['lon'] );          
            }
          var line = new PolylineId(latLngs, {osmid: wayId, data: way });
          line.on('click', loaddata);
          line.addTo(map);
          }
        },
    };
    var opl = new L.OverPassLayer( options );
    return opl;
}

var osmLayer = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}) ;

 var overpasslayer = WaysWithDestination();

 var map = L.map("map", {
        center: [50.23066,8.86182],
        zoom: 14,
        layers: [ osmLayer, overpasslayer ]
});


map.addControl(new L.Control.Permalink({text: 'Permalink'}));

var hash = (location.hash ||'').replace(/^#/,'').split('&');
var namedroutes = false;
var fromarrow = false;
var way = 0;
for(i=0; i<hash.length; i++ ){
  var t = hash[i].split('=');
  if (t[0]=='wayid')      {        way = t[1];        }
  if (t[0]=="direction"){   document.getElementsByName('direction')[0].value = t[1];  }
  if (t[0]=="country")  {   document.getElementsByName('country')[0].value = t[1];    }
  }
console.log(way);
if(way) {
  getsign(way);
  } 


const mediaQuery = window.matchMedia('(max-width: 50em)');

function handleWindowSizeChange(e) {
  var checkboxHideOther = document.getElementById("hideOther");
  checkboxHideOther.checked = e.matches;
  toggleOtherTagsVisibility();
}
function isDestinationSignInViewPort(el) {
    var rect = document.getElementById('container').getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
    );
}
// Register event listener
mediaQuery.addListener(handleWindowSizeChange);

// Initial check
handleWindowSizeChange(mediaQuery);

</script>

</html>
